#define CHECK_SET_TOKEN_TYPE(t_type) if (!current_token->type)\
{ current_token->type = t_type; }

#define TOKEN_BODY_SET(start, t_length) current_token->body = &text[start];\
current_token->length = t_length;

#define _SET_CURRENT_TOKEN   current_token = (token*)vector_get(tokens, tokens->length);
#define NEW_TOKEN           vector_add(tokens, token_create()); _SET_CURRENT_TOKEN;
#define TRAVERSE_TO(term)   while (i < text_length && text[i] != term) { i++; }
#define END_TOKEN           current_token->length = token_length; current_token = NULL;

#define LOOKAHEAD(sz, trm)  if (text[i+s] >= text_length) { return; }\
else if (text[i+s+1] != t) { i++; continue; }
// ^ todo test speed w/ & w/o lookahead

int tokenize(char* text, size_t text_length, vector* tokens) {
    if (!text_length) return 0;
    // lex the file into tokens
    // build the word database
    // if number, do
    size_t token_length, i = 0;
    token* current_token = NULL;
    NEW_TOKEN;
    goto first_in_line;
    while (i < text_length) {
        switch (text[i]) { // TODO ADD LOOK-AHEAD USING MD_PD_ VALUES TO CHECK FOR EOF
            case ('\n'): {
                END_TOKEN; NEW_TOKEN;
                current_token->type = BREAK;
                first_in_line:
                while(text[++i] == '\t' || text[i] == ' '); // skip whitespace
                if ('1' <= text[i] && text[i] <= '9') { // ORDERED LIST
                    while ('0' <= text[++i] && text[i] <= '9');
                    if (text[i] == '.' && text[++i] == ' ') {
                        
                    } 
                }
                switch (text[++i]) {
                    case ('#'): { // HEADER
                        int level = 1;
                        while (text[++i] == '#') { level++; }
                        if (text[i] == ' ') {
                            if (level > 6) { level = 6; }
                            CHECK_SET_TOKEN_TYPE(HEADER_ + level);
                        }
                    } break;
                    case ('-'): { // UNORDERED LIST & TASK LIST
                        if (text[++i] == ' ' && text[++i] != '\n') {
                            
                        }
                    } break;
                    case ('>'): { // BLOCK QUOTE

                    } break;
                }
            } break;
            case ('|'): {
                if (text[++i] == '|' && text[++i] != ' ' && text[i] != '\n') {
                    size_t content_start = i;
                    TRAVERSE_TO('|');
                    token_length = i - content_start;
                    END_TOKEN;
                }
            } break;
            case ('\\'): { // escape, skip next char
                i += 2; continue;
            } break;
            case ('`'): {} break;
            case ('!'): {} break;
            case ('['): {} break;
            case ('*'): {} break;
            case ('_'): {} break;
            case ('~'): {} break;
            default: { ;; }
        }
        i++;
    } 

    printf("%s\n", text);
    return 0;
}